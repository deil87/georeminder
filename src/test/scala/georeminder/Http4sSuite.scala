/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package georeminder

import cats.implicits._
import cats.effect._
import org.http4s._
import org.http4s.implicits._
import org.http4s.dsl.io._
import org.http4s.server.Router
import org.http4s.server.blaze.BlazeServerBuilder

import scala.concurrent.ExecutionContext.Implicits.global
import org.junit.runner.RunWith
import org.scalatest.funsuite.AnyFunSuite
import org.scalatestplus.junit.JUnitRunner


@RunWith(classOf[JUnitRunner])
class Http4sSuite extends AnyFunSuite {


  implicit val cs: ContextShift[IO] = IO.contextShift(global)
  implicit val timer: Timer[IO] = IO.timer(global)

  val helloWorldService = HttpRoutes.of[IO] {
    case GET -> Root / "hello" / name =>
      Ok(s"Hello, $name.")
  }

  test("Create simple Rest server") {

    case class Tweet(id: Int, message: String)
    // defined class Tweet

    implicit def tweetEncoder: EntityEncoder[IO, Tweet] = ???
    // tweetEncoder: org.http4s.EntityEncoder[cats.effect.IO,Tweet]

    implicit def tweetsEncoder: EntityEncoder[IO, Seq[Tweet]] = ???
    // tweetsEncoder: org.http4s.EntityEncoder[cats.effect.IO,Seq[Tweet]]

    def getTweet(tweetId: Int): IO[Tweet] = ???
    // getTweet: (tweetId: Int)cats.effect.IO[Tweet]

    def getPopularTweets(): IO[Seq[Tweet]] = ???
    // getPopularTweets: ()cats.effect.IO[Seq[Tweet]]

    val tweetService = HttpRoutes.of[IO] {
      case GET -> Root / "tweets" / "popular" =>
        getPopularTweets().flatMap(Ok(_))
      case GET -> Root / "tweets" / IntVar(tweetId) =>
        getTweet(tweetId).flatMap(Ok(_))
    }

    val services = tweetService <+> helloWorldService

    val httpApp = Router("/" -> helloWorldService, "/api" -> services).orNotFound
    // httpApp: cats.data.Kleisli[cats.effect.IO,org.http4s.Request[cats.effect.IO],org.http4s.Response[cats.effect.IO]] = Kleisli(org.http4s.syntax.KleisliResponseOps$$Lambda$35339/1617797639@78d8135d)

    val serverBuilder = BlazeServerBuilder[IO].bindHttp(8080, "localhost").withHttpApp(httpApp)

    val fiber = serverBuilder.resource.use(_ => IO.never).start.unsafeRunSync()
    Thread.sleep(10000)

//    fiber.cancel.unsafeRunSync()
  }


}
